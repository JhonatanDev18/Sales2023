@page "/city/edit/{CityId:int}"
@inject IRepository repository
@inject NavigationManager navigationManager
@inject SweetAlertService sweetAlertService
@attribute [Authorize(Roles = "Admin")]

<h3>Editar Ciudad</h3>

@if (city is null)
{
    <div class="spinner" />
}
else
{
    <CityForm @ref="cityForm" City="city" OnValidSubmit="EditAsync" ReturnAction="Return"></CityForm>
}

@code {
    private City? city;
    private CityForm? cityForm;

    [CascadingParameter]
    BlazoredModalInstance BlazoredModal { get; set; } = default!;

    [Parameter]
    public int CityId { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var responseHttp = await repository.Get<City>($"/api/cities/{CityId}");

        if (responseHttp.Error)
        {
            if (responseHttp.HttpResponseMessage.StatusCode == System.Net.HttpStatusCode.NotFound)
            {
                navigationManager.NavigateTo("/countries");
                return;
            }

            var message = await responseHttp.GetErrorMessageAsync();
            await sweetAlertService.FireAsync("Error", message, SweetAlertIcon.Error);
            return;
        }

        city = responseHttp.Response;
    }

    private async void EditAsync()
    {
        var responseHttp = await repository.Put("/api/cities", city);

        if (responseHttp.Error)
        {
            var message = await responseHttp.GetErrorMessageAsync();
            await sweetAlertService.FireAsync("Error", message, SweetAlertIcon.Error);
            return;
        }

        await BlazoredModal.CloseAsync(ModalResult.Ok());
        Return();
    }

    private void Return()
    {
        cityForm!.FormPostedSuccessfully = true;
        navigationManager.NavigateTo($"/state/details/{city!.StateId}");
    }
}
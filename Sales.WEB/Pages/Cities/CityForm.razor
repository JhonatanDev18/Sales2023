@inject SweetAlertService sweetAletService

<NavigationLock OnBeforeInternalNavigation="OnBeforeInternalNavigation" />

<EditForm EditContext="editContext" OnValidSubmit="OnValidSubmit">
    <DataAnnotationsValidator />
    <div class="card">
        <div class="card-header">
            <span>
                <i class="oi oi-globe"></i> Ciudad:
            </span>
        </div>
        <div class="card-body">
            <div class="mb-3">
                <div>
                    <InputText class="form-control" @bind-Value="@City.Name" />
                    <ValidationMessage For="@(() => City.Name)" />
                </div>
            </div>
            <button class="btn btn-success" @onclick="ReturnAction"><i class="oi oi-arrow-thick-left"></i> Regresar</button>
            <button class="btn btn-primary" type="submit"><i class="oi oi-inbox"></i> Guardar Cambios</button>
        </div>
    </div>
</EditForm>

@code {
    private EditContext editContext = null!;

    [Parameter]
    [EditorRequired]
    public City City { get; set; } = null!;

    [Parameter]
    [EditorRequired]
    public EventCallback OnValidSubmit { get; set; }

    [Parameter]
    [EditorRequired]
    public EventCallback ReturnAction { get; set; }

    public bool FormPostedSuccessfully { get; set; }

    protected override void OnInitialized()
    {
        editContext = new(City);
    }

    private async Task OnBeforeInternalNavigation(LocationChangingContext context)
    {
        var formWasMofied = editContext.IsModified();
        if (!formWasMofied || FormPostedSuccessfully)
        {
            return;
        }

        var result = await sweetAletService.FireAsync(new SweetAlertOptions
            {
                Title = "Confirmación",
                Text = "¿Deseas abandonar la página y perder los cambios?",
                Icon = SweetAlertIcon.Question,
                ShowCancelButton = true,
                CancelButtonText = "No",
                ConfirmButtonText = "Sí"
            });

        var confirm = !String.IsNullOrEmpty(result.Value);

        if (confirm)
        {
            return;
        }

        context.PreventNavigation();
    }
}
